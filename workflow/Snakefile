from snakemake.utils import validate
from snakemake.utils import Paramspace
from snakemake import load_configfile
import pandas as pd
import os


configfile : "config/workflowsettings.yaml"
validate(config,"schemas/config.schema.yaml")

# todo: if some sort of automated sanity-checks are implemented on the cases, this could be replaced with a parser
AVAIL_TEMPLATES = ["openfoamCompressorCascadeRas"]

def get_filelist_fromdir(path):
    filelist = []
    for r, d, f in os.walk(path):
        for file in f:
            filelist.append(os.path.join(r, file))
    return filelist

class case_template:

    psign = "PARAM"
    osign = "OPTION"

    def __init__(self, name):
        self.name = name
        self.path = f"resources/{name}"
        self.param_schema = f"schemas/{name}/param.schema.yaml"
        self.option_schema = f"schemas/{name}/option.schema.yaml"
        self.files = [os.path.relpath(fpath, self.path) for fpath in get_filelist_fromdir(self.path)]


CASE_TEMPLATES = {templatename: case_template(templatename) for templatename in AVAIL_TEMPLATES}

template = CASE_TEMPLATES[config["case_params"]["case_type"]]

params = pd.read_csv("config/case_params.tsv",sep="\t")
validate(params, template.param_schema)
paramspace = Paramspace(params)
options = load_configfile("config/case_options.yaml")
validate(options,template.option_schema)


def get_meshdirs():
    return [f"results/simulations/{instance_pattern}/constant/polyMesh" for instance_pattern in paramspace.instance_patterns]

"""
def get_casefiles():
    files = [f"results/simulations/{instance_pattern}/{file}" for instance_pattern in paramspace.instance_patterns for file
      in template.files]
    return files
"""

include: "rules/create.smk"
include: "rules/prep.smk"

rule all:
    input :
        #*get_casefiles(),
        *get_meshdirs(),

