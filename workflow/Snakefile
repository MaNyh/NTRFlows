from snakemake.utils import validate
from snakemake.utils import Paramspace
import pandas as pd

configfile : "config/config.yaml"
validate(config,"schemas/config.schema.yaml")

params = pd.read_csv("config/params.tsv",sep="\t")
validate(params, "schemas/param.schema.yaml")


paramspace = Paramspace(params)
paramspace.param_sep="~"
# the wildcardpattern is dependend on the keys defined in case_params.tv
# the pattern needs to contain all params and therefore the length has to be adapted

NUMPARAMS = len(paramspace.dataframe.keys())
if NUMPARAMS==1:
    paramspace.pattern="{}"
elif NUMPARAMS>1:
    paramspace.pattern="{}_" + (NUMPARAMS - 2) * "{}_" + "{}"

SIMS = list(paramspace["id"])
DEPS = list(paramspace["dependency"])
SIMNAMES = list(paramspace.instance_patterns)


assert len(SIMS)==len(set(SIMS)), "you need to use unique identifications for your simulations"

include: "rules/common.smk"
include: "rules/create.smk"
include: "rules/prep.smk"
include: "rules/execute.smk"
include: "rules/post.smk"

rule all:
    input: get_post()

localrules: all, create_case, touch_independents, touch_dependents, write_caseconfig



