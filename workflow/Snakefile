from snakemake.utils import validate
from snakemake.utils import Paramspace
from snakemake import load_configfile
import pandas as pd
import os


configfile : "config/workflowsettings.yaml"
validate(config,"schemas/config.schema.yaml")


def get_filelist_fromdir(path):
    #import pdb
    #pdb.set_trace()

    filelist = []
    for r, d, f in os.walk(path):
        for file in f:
            filelist.append(os.path.join(r, file))

    return filelist

class case_template:

    def __init__(self, name):
        self.name = name
        self.path = f"resources/templates/{name}"
        self.param_schema = f"schemas/param.schema.yaml"
        self.files = [os.path.relpath(fpath, self.path) for fpath in get_filelist_fromdir(self.path)]



template = case_template("openfoamCompressorCascadeRas")

params = pd.read_csv("config/case_params.tsv",sep="\t")
validate(params, template.param_schema)
paramspace = Paramspace(params)
paramspace.param_sep="~"
paramspace.pattern="{}_{}_{}"

def get_casefiles():
    """
    this method probably (!) can't be used with create_case.smk, as there the wildcards have to be defined from the
    template-files
    :return:
    """
    files = [f"results/simulations/{instance_pattern}/{file}" for instance_pattern in paramspace.instance_patterns for file
      in template.files]
    return files

def get_defined_sim():
    res = [directory(f"results/simulations/{instance_pattern}/{proc}/constant" for instance_pattern in paramspace.instance_patterns for proc in [f"processor{id}"  for id in range(config["processors"])])]
    return res


def get_results():
    """
    get list of results dependend on case_params.tsv and the workflowsettings.yaml
    this list will be used to determine wildcards. wildcards are passed down the rules
    """
    res = [f"results/simulations/{instance_pattern}/{proc}/{config['endtime']}/p"
                                            for instance_pattern in paramspace.instance_patterns
                                            for proc in [f"processor{id}"  for id in range(config["processors"])]]
    return res

def get_post():
    res = [f"results/simulations/{instance_pattern}/bladeloading.csv"
                                            for instance_pattern in paramspace.instance_patterns]
    return res

"""
include all refactored rules
"""
include: "rules/create.smk"
include: "rules/prep.smk"
include: "rules/execute.smk"
include: "rules/post.smk"


"""
When working in a cluster environment, not all rules need to become a job that has to be submitted 
(e.g. downloading some file, or a target-rule like all, see Targets and aggregation). 
The keyword localrules allows to mark a rule as local,
so that it is not submitted to the cluster and instead executed on the host node

https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#resources
"""

localrules: all, prep_config_create_case, create_case, prep, prepost, find_results, bladeloading

rule all:
    input :
        #*get_casefiles(),
        #get_defined_sim(),
        #get_results(),
        get_post()
